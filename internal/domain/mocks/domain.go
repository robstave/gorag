// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	types "github.com/robstave/gorag/internal/domain/types"
	mock "github.com/stretchr/testify/mock"
)

// Domain is an autogenerated mock type for the Domain type
type Domain struct {
	mock.Mock
}

// CreateWidget provides a mock function with given fields: widget
func (_m *Domain) CreateWidget(widget types.Widget) (*types.Widget, error) {
	ret := _m.Called(widget)

	var r0 *types.Widget
	if rf, ok := ret.Get(0).(func(types.Widget) *types.Widget); ok {
		r0 = rf(widget)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Widget)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Widget) error); ok {
		r1 = rf(widget)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWidget provides a mock function with given fields: widgetID
func (_m *Domain) DeleteWidget(widgetID string) error {
	ret := _m.Called(widgetID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(widgetID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllWidgets provides a mock function with given fields:
func (_m *Domain) GetAllWidgets() ([]types.Widget, error) {
	ret := _m.Called()

	var r0 []types.Widget
	if rf, ok := ret.Get(0).(func() []types.Widget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Widget)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWidgetByID provides a mock function with given fields: widgetID
func (_m *Domain) GetWidgetByID(widgetID string) (*types.Widget, error) {
	ret := _m.Called(widgetID)

	var r0 *types.Widget
	if rf, ok := ret.Get(0).(func(string) *types.Widget); ok {
		r0 = rf(widgetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Widget)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(widgetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SeedWidget provides a mock function with given fields:
func (_m *Domain) SeedWidget() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWidget provides a mock function with given fields: widget
func (_m *Domain) UpdateWidget(widget types.Widget) (*types.Widget, error) {
	ret := _m.Called(widget)

	var r0 *types.Widget
	if rf, ok := ret.Get(0).(func(types.Widget) *types.Widget); ok {
		r0 = rf(widget)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Widget)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Widget) error); ok {
		r1 = rf(widget)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDomain interface {
	mock.TestingT
	Cleanup(func())
}

// NewDomain creates a new instance of Domain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDomain(t mockConstructorTestingTNewDomain) *Domain {
	mock := &Domain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
